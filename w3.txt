#pragma once
// Workshop 3 - Prefix Scan
// Balanced Tree Case
// prefix_scan.h
#include <omp.h>
#define SHORT_CALL
#define BALANCED

template <typename T, typename C>
int incl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  int numThreads = 0;
  // initialize
#pragma omp parallel 
  {
    numThreads = omp_get_num_threads();
#pragma omp for
    for (int i = 0; i < size; i++)
      out[i] = in[i];
    // add inner parallell for
    // upsweep (reduction)
    for (int stride = 1; stride < size; stride <<= 1) {
#pragma omp for
      for (int i = 0; i < size; i += 2 * stride)
        out[2 * stride + i - 1] = combine(out[2 * stride + i - 1],
          out[stride + i - 1]);
    }
    // clear last element
    T last = out[size - 1];
    out[size - 1] = T(0);
    // downsweep
    for (int stride = size / 2; stride > 0; stride >>= 1) {
#pragma omp for
      for (int i = 0; i < size; i += 2 * stride) {
        T temp = out[stride + i - 1];
        out[stride + i - 1] = out[2 * stride + i - 1];
        out[2 * stride + i - 1] = combine(temp, out[2 * stride + i - 1]);
      }
    }
    // shift left for inclusive scan and add last
#pragma omp for
    for (int i = 0; i < size - 1; i++)
      out[i] = out[i + 1];

    out[size - 1] = last;
  }
  return numThreads;
}

template <typename T, typename C>
int excl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  int numThreads = 0;
  // initialize
#pragma omp parallel
  {
    numThreads = omp_get_num_threads();
#pragma omp for
    for (int i = 0; i < size; i++)
      out[i] = in[i];
    // upsweep (reduction)
    for (int stride = 1; stride < size; stride <<= 1) {
#pragma omp for
      for (int i = 0; i < size; i += 2 * stride)
        out[2 * stride + i - 1] = combine(out[2 * stride + i - 1],
          out[stride + i - 1]);
    }
    // clear last element
    out[size - 1] = T(0);
    // downsweep
    for (int stride = size / 2; stride > 0; stride >>= 1) {
#pragma omp for
      for (int i = 0; i < size; i += 2 * stride) {
        T temp = out[stride + i - 1];
        out[stride + i - 1] = out[2 * stride + i - 1];
        out[2 * stride + i - 1] = combine(temp, out[2 * stride + i - 1]);
      }
    }
  }
  return numThreads;
}

template <typename T, typename C, typename S>
int scan(
  const T* in,   // source data
  T* out,        // output data
  int size,      // size of source, output data sets
  C combine,     // combine expression
  S scan_fn,     // scan function (exclusive or inclusive)
  T initial      // initial value
)
{
  return scan_fn(in, out, size, combine, T(0));
}

#pragma once
#include <omp.h>
// Workshop 3 - Prefix Scan
// Tiled Serial Case
// prefix_scan.h

template <typename T, typename C>
void incl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  for (int i = 0; i < size; i++) {
    initial = combine(initial, in[i]);
    out[i] = initial;
  }
}

template <typename T, typename C>
void excl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  if (size > 0) {
    for (int i = 0; i < size - 1; i++) {
      out[i] = initial;
      initial = combine(initial, in[i]);
    }
    out[size - 1] = initial;
  }
}

/*template <typename T, typename C, typename S>
int scan(
const T* in,   // source data
T* out,        // output data
int size,      // size of source, output data sets
C combine,     // combine expression
S scan_fn,     // scan function (exclusive or inclusive)
T initial      // initial value
)
{
scan_fn(in, out, size, combine, T(0));
return 1; // returns number of threads
}*/

template <typename T, typename C>
T reduce(
  const T* in, // points to the data set
  int n,       // number of elements in the data set
  C combine,   // combine operation
  T initial    // initial value
) {

  for (int i = 0; i < n; i++)
    initial = combine(initial, in[i]);
  return initial;
}

template <typename T, typename R, typename C, typename S>
int scan(
  const T* in,   // source data
  T* out,        // output data
  int size,      // size of source, output data sets
  R reduce,      // reduction expression
  C combine,     // combine expression
  S scan_fn,     // scan function (exclusive or inclusive)
  T initial      // initial value
)
{
  const int tile_size = 2;
  int nthreads = 1;
  if (size > 0) {
    // requested number of tiles
    int ntiles = 0;
    int max_tiles = omp_get_max_threads();
    T* reduced = new T[max_tiles];
    T* scanRes = new T[max_tiles];
#pragma omp parallel 
    {
      ntiles = omp_get_num_threads();
      int itile = omp_get_thread_num();

      if (itile == 0) nthreads = ntiles;

      int last_tile = ntiles - 1;
      int last_tile_size = size - last_tile * tile_size;


      // step 1 - reduce each tile separately
      for (int itile = 0; itile < ntiles; itile++)
        reduced[itile] = reduce(in + itile * tile_size,
          itile == last_tile ? last_tile_size : tile_size, combine, T(0));
#pragma omp barrier
      // step 2 - perform exclusive scan on all tiles using reduction outputs 
      // store results in scanRes[]
#pragma omp single
      excl_scan(reduced, scanRes, ntiles, combine, T(0));


      // step 3 - scan each tile separately using scanRes[]
      for (int itile = 0; itile < ntiles; itile++)
        scan_fn(in + itile * tile_size, out + itile * tile_size,
          itile == last_tile ? last_tile_size : tile_size, combine,
          scanRes[itile]);

    }
    delete[] reduced;
    delete[] scanRes;
  }
  return nthreads;
}

#pragma once
// Workshop 3 - Prefix Scan
// Three-Step Work Sharing Case
// prefix_scan.h
#include <omp.h>


template <typename T, typename C>
void incl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  for (int i = 0; i < size; i++) {
    initial = combine(initial, in[i]);
    out[i] = initial;
  }
}

template <typename T, typename C>
void excl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  if (size > 0) {
    for (int i = 0; i < size - 1; i++) {
      out[i] = initial;
      initial = combine(initial, in[i]);
    }
    out[size - 1] = initial;
  }
}

template <typename T, typename C>
T reduce(
  const T* in, // points to the data set
  int n,       // number of elements in the data set
  C combine,   // combine operation
  T initial    // initial value
) {

  for (int i = 0; i < n; i++)
    initial = combine(initial, in[i]);
  return initial;
}

template <typename T, typename R, typename C, typename S>
int scan(
  const T* in,   // source data
  T* out,        // output data
  int size,      // size of source, output data sets
  R reduce,      // reduction expression
  C combine,     // combine expression
  S scan_fn,     // scan function (exclusive or inclusive)
  T initial      // initial value
)
{
  const int tile_size = 2;
  int nthreads = 0;
  int ntiles = 0;
  if (size > 0) {
    // requested number of tiles

    int max_tiles = omp_get_max_threads();
    T* reduced = new T[max_tiles];
    T* scanRes = new T[max_tiles];
#pragma omp parallel 
    {
      ntiles = omp_get_num_threads();
      int itile = omp_get_thread_num();

      int tile_size = (size - 1) / (ntiles + 1);
      int last_tile = ntiles - 1;
      int last_tile_size = size - last_tile * tile_size;

      if (itile == 0) nthreads = ntiles;
      // step 1 - reduce each tile separately
#pragma omp for
      for (int itile = 0; itile < ntiles; itile++)
        reduced[itile] = reduce(in + itile * tile_size,
          itile == last_tile ? last_tile_size : tile_size, combine, T(0));
      // step 2 - perform exclusive scan on all tiles using reduction outputs 
      // store results in scanRes[]
#pragma omp single
      excl_scan(reduced, scanRes, ntiles, combine, T(0));
      // step 3 - scan each tile separately using scanRes[]
#pragma omp for
      for (int itile = 0; itile < ntiles; itile++)
        scan_fn(in + itile * tile_size, out + itile * tile_size,
          itile == last_tile ? last_tile_size : tile_size, combine,
          scanRes[itile]);
    }
    delete[] reduced;
    delete[] scanRes;
  }
  return ntiles;
}

#pragma once
// Workshop 3 - Prefix Scan
// Tiled Serial Case
// prefix_scan.h

template <typename T, typename C>
void incl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  for (int i = 0; i < size; i++) {
    initial = combine(initial, in[i]);
    out[i] = initial;
  }
}

template <typename T, typename C>
void excl_scan(
  const T* in, // source data
  T* out,      // output data
  int size,    // size of source, output data sets
  C combine,   // combine expression
  T initial    // initial value
)
{
  if (size > 0) {
    for (int i = 0; i < size - 1; i++) {
      out[i] = initial;
      initial = combine(initial, in[i]);
    }
    out[size - 1] = initial;
  }
}

/*template <typename T, typename C, typename S>
int scan(
  const T* in,   // source data
  T* out,        // output data
  int size,      // size of source, output data sets
  C combine,     // combine expression
  S scan_fn,     // scan function (exclusive or inclusive)
  T initial      // initial value
)
{
  scan_fn(in, out, size, combine, T(0));
  return 1; // returns number of threads
}*/

template <typename T, typename C>
T reduce(
  const T* in, // points to the data set
  int n,       // number of elements in the data set
  C combine,   // combine operation
  T initial    // initial value
) {

  for (int i = 0; i < n; i++)
    initial = combine(initial, in[i]);
  return initial;
}

template <typename T, typename R, typename C, typename S>
int scan(
  const T* in,   // source data
  T* out,        // output data
  int size,      // size of source, output data sets
  R reduce,      // reduction expression
  C combine,     // combine expression
  S scan_fn,     // scan function (exclusive or inclusive)
  T initial      // initial value
)
{
  const int tile_size = 2;
  if (size > 0) {
    // requested number of tiles
    int ntiles = (size - 1) / tile_size + 1;
    T* reduced = new T[ntiles];
    T* scanRes = new T[ntiles];
    int last_tile = ntiles - 1;
    int last_tile_size = size - last_tile * tile_size;

    // step 1 - reduce each tile separately
    for (int itile = 0; itile < ntiles; itile++)
      reduced[itile] = reduce(in + itile * tile_size,
        itile == last_tile ? last_tile_size : tile_size, combine, T(0));

    // step 2 - perform exclusive scan on all tiles using reduction outputs 
    // store results in scanRes[]
    excl_scan(reduced, scanRes, ntiles, combine, T(0));

    // step 3 - scan each tile separately using scanRes[]
    for (int itile = 0; itile < ntiles; itile++)
      scan_fn(in + itile * tile_size, out + itile * tile_size,
        itile == last_tile ? last_tile_size : tile_size, combine,
        scanRes[itile]);
    delete[] reduced;
    delete[] scanRes;
  }
  return 1;
}

// Workshop 3 - Prefix Scan
// Prefix Scan Solution
// w3.main.cpp

#include <iostream>
#include <cstdlib>
#include <chrono>
#include "prefix_scan.h"
using namespace std::chrono;
//#define SHORT_CALL  // comment out for Tiled, SPMD, and Work Sharing 

// report system time
//
void reportTime(const char* msg, steady_clock::duration span) {
  auto ms = duration_cast<milliseconds>(span);
  std::cout << msg << " - took - " <<
    ms.count() << " milliseconds" << std::endl;
}

int main(int argc, char** argv) {
  if (argc > 2) {
    std::cerr << argv[0] << ": invalid number of arguments\n";
    std::cerr << "Usage: " << argv[0] << "\n";
    std::cerr << "Usage: " << argv[0] << "  power_of_2\n";
    return 1;
  }

  // initial values for testing
  const int N = 9;
  const int in_[N] = { 3, 1, 7, 0, 1, 4, 5, 9, 2 };

  // command line arguments - none for testing, 1 for large arrays
  int n, nt;
  if (argc == 1) {
    n = N;
  }
  else {
    n = std::atoi(argv[1]);
    if (n < N) n = N;
  }
  int* in = new int[n];
  int* out = new int[n];

  // initialize
  for (int i = 0; i < N; i++)
    in[i] = in_[i];
  for (int i = N; i < n; i++)
    in[i] = 1;
  auto add = [](int a, int b) { return a + b; };

  steady_clock::time_point ts, te;
  ts = steady_clock::now();
  nt = scan(in, out, n,
#ifndef SHORT_CALL
    reduce<int, decltype(add)>,
#endif
    add, incl_scan<int, decltype(add)>, (int)0);
  te = steady_clock::now();

  std::cout << nt << " threads" << std::endl;
  for (int i = 0; i < N; i++)
    std::cout << out[i] << ' ';
  std::cout << out[n - 1] << std::endl;

  reportTime("Inclusive Prefix Scan", te - ts);

  ts = steady_clock::now();
  nt = scan(in, out, n,
#ifndef SHORT_CALL
    reduce<int, decltype(add)>,
#endif
    add, excl_scan<int, decltype(add)>, (int)0);
  te = steady_clock::now();

  std::cout << nt << " threads" << std::endl;
  for (int i = 0; i < N; i++)
    std::cout << out[i] << ' ';
  std::cout << out[n - 1] << std::endl;

  reportTime("Exclusive Prefix Scan", te - ts);

  delete[] in;
  delete[] out;

  // terminate
  char c;
  std::cout << "Press Enter key to exit ... ";
  std::cin.get(c);
}


